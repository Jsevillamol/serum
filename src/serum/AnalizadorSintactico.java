
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 08 16:09:04 CEST 2018
//----------------------------------------------------

package serum;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 08 16:09:04 CEST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\003\000\002\002\005\000\002\003\006" +
    "\000\002\003\005\000\002\003\011\000\002\003\010\000" +
    "\002\003\010\000\002\003\007\000\002\003\006\000\002" +
    "\003\005\000\002\003\003\000\002\004\011\000\002\004" +
    "\010\000\002\004\010\000\002\004\007\000\002\004\006" +
    "\000\002\004\005\000\002\004\003\000\002\005\005\000" +
    "\002\005\003\000\002\005\003\000\002\006\004\000\002" +
    "\006\006\000\002\007\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\004\000\002\011\003\000\002\011\006" +
    "\000\002\012\003\000\002\012\005\000\002\012\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\020\004\021\005\016\007\013\011\005\012" +
    "\017\036\020\040\004\001\002\000\006\002\ufffe\037\ufffe" +
    "\001\002\000\014\012\017\013\027\014\031\031\032\032" +
    "\033\001\002\000\012\002\uffea\010\uffea\037\uffea\040\uffea" +
    "\001\002\000\012\002\uffeb\010\uffeb\037\uffeb\040\uffeb\001" +
    "\002\000\006\015\137\034\066\001\002\000\010\002\ufff4" +
    "\037\ufff4\040\ufff4\001\002\000\004\002\136\001\002\000" +
    "\014\012\017\013\027\014\031\031\032\032\033\001\002" +
    "\000\010\002\000\037\000\040\071\001\002\000\006\006" +
    "\024\012\025\001\002\000\006\006\uffe5\012\uffe5\001\002" +
    "\000\064\002\uffe3\004\uffe3\005\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\001\002\000\020\004\021\005\016\007\013\011\005\012" +
    "\017\036\020\040\004\001\002\000\006\006\uffe6\012\uffe6" +
    "\001\002\000\004\037\023\001\002\000\012\002\uffec\010" +
    "\uffec\037\uffec\040\uffec\001\002\000\006\006\uffe4\012\uffe4" +
    "\001\002\000\014\002\uffe9\010\uffe9\015\026\037\uffe9\040" +
    "\uffe9\001\002\000\014\012\017\013\027\014\031\031\032" +
    "\032\033\001\002\000\060\002\uffdf\004\uffdf\005\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\033\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\001\002\000\062\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\033\uffe1\034\066\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\001\002\000\060\002\uffda\004\uffda\005\uffda\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\033\uffda\035\uffda\036\uffda\037\uffda\040\uffda\001\002" +
    "\000\014\012\017\013\027\014\031\031\032\032\033\001" +
    "\002\000\014\012\017\013\027\014\031\031\032\032\033" +
    "\001\002\000\040\002\uffe8\010\uffe8\016\042\017\036\020" +
    "\044\021\035\022\037\023\046\024\040\025\045\026\043" +
    "\027\047\030\041\037\uffe8\040\uffe8\001\002\000\014\012" +
    "\017\013\027\014\031\031\032\032\033\001\002\000\014" +
    "\012\017\013\027\014\031\031\032\032\033\001\002\000" +
    "\014\012\017\013\027\014\031\031\032\032\033\001\002" +
    "\000\014\012\017\013\027\014\031\031\032\032\033\001" +
    "\002\000\014\012\017\013\027\014\031\031\032\032\033" +
    "\001\002\000\014\012\017\013\027\014\031\031\032\032" +
    "\033\001\002\000\014\012\017\013\027\014\031\031\032" +
    "\032\033\001\002\000\014\012\017\013\027\014\031\031" +
    "\032\032\033\001\002\000\014\012\017\013\027\014\031" +
    "\031\032\032\033\001\002\000\014\012\017\013\027\014" +
    "\031\031\032\032\033\001\002\000\014\012\017\013\027" +
    "\014\031\031\032\032\033\001\002\000\060\002\uffd8\004" +
    "\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\033\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\001\002\000\060\002\uffde\004\uffde\005" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\016\042\017\036" +
    "\020\044\021\035\022\037\023\uffde\024\uffde\025\045\026" +
    "\043\027\047\030\041\033\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\001\002\000\060\002\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\016\042\017\036\020\044" +
    "\021\035\022\037\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\047\030\041\033\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\001\002\000\060\002\uffd4\004\uffd4\005\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\047\030" +
    "\041\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002" +
    "\000\060\002\uffdc\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\016\042\017\036\020\044\021\035\022\037" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\047\030\041\033" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\060" +
    "\002\uffd6\004\uffd6\005\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\047\030\041\033\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000\060\002\uffd9" +
    "\004\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\047\030\uffd9\033\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\001\002\000\060\002\uffdd\004\uffdd" +
    "\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\016\042\017" +
    "\036\020\044\021\035\022\037\023\uffdd\024\uffdd\025\045" +
    "\026\043\027\047\030\041\033\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\001\002\000\060\002\uffd2\004\uffd2\005\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\047\030\041\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\001\002\000\060\002\uffd5\004\uffd5\005\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\047" +
    "\030\041\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\001" +
    "\002\000\060\002\uffd3\004\uffd3\005\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\047\030\041" +
    "\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002\000" +
    "\032\016\042\017\036\020\044\021\035\022\037\023\046" +
    "\024\040\025\045\026\043\027\047\030\041\033\064\001" +
    "\002\000\060\002\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000" +
    "\060\002\uffd7\004\uffd7\005\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\016\042\017\036\020\044\021\035\022\037\023" +
    "\046\024\040\025\045\026\043\027\047\030\041\033\uffd7" +
    "\035\uffd7\036\uffd7\037\uffd7\040\uffd7\001\002\000\014\012" +
    "\017\013\027\014\031\031\032\032\033\001\002\000\032" +
    "\016\042\017\036\020\044\021\035\022\037\023\046\024" +
    "\040\025\045\026\043\027\047\030\041\035\070\001\002" +
    "\000\064\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\001\002\000\024\002\uffff\004\021\005\016\007\013\011" +
    "\005\012\017\036\020\037\uffff\040\004\001\002\000\006" +
    "\002\ufffd\037\ufffd\001\002\000\046\004\021\005\016\007" +
    "\077\011\076\012\017\016\042\017\036\020\044\021\035" +
    "\022\037\023\046\024\040\025\045\026\043\027\047\030" +
    "\041\036\020\040\100\001\002\000\010\002\ufffb\037\ufffb" +
    "\040\ufffb\001\002\000\004\010\134\001\002\000\014\012" +
    "\017\013\027\014\031\031\032\032\033\001\002\000\014" +
    "\012\017\013\027\014\031\031\032\032\033\001\002\000" +
    "\016\004\021\005\016\007\077\011\076\012\017\036\020" +
    "\001\002\000\012\002\ufff4\010\uffed\037\ufff4\040\ufff4\001" +
    "\002\000\010\002\ufffc\037\ufffc\040\ufffc\001\002\000\004" +
    "\010\104\001\002\000\020\004\021\005\016\007\013\011" +
    "\005\012\017\036\020\040\105\001\002\000\016\004\021" +
    "\005\016\007\013\011\005\012\017\036\020\001\002\000" +
    "\010\002\ufff8\037\ufff8\040\ufff8\001\002\000\010\002\ufffa" +
    "\037\ufffa\040\ufffa\001\002\000\046\004\021\005\016\007" +
    "\077\011\076\012\017\016\042\017\036\020\044\021\035" +
    "\022\037\023\046\024\040\025\045\026\043\027\047\030" +
    "\041\036\020\040\112\001\002\000\004\010\120\001\002" +
    "\000\016\004\021\005\016\007\077\011\076\012\017\036" +
    "\020\001\002\000\004\010\114\001\002\000\020\004\021" +
    "\005\016\007\077\011\076\012\017\036\020\040\115\001" +
    "\002\000\016\004\021\005\016\007\077\011\076\012\017" +
    "\036\020\001\002\000\004\010\ufff1\001\002\000\004\010" +
    "\ufff3\001\002\000\020\004\021\005\016\007\077\011\076" +
    "\012\017\036\020\040\121\001\002\000\016\004\021\005" +
    "\016\007\077\011\076\012\017\036\020\001\002\000\010" +
    "\002\ufff7\037\ufff7\040\ufff7\001\002\000\004\010\ufff0\001" +
    "\002\000\010\002\ufff9\037\ufff9\040\ufff9\001\002\000\004" +
    "\010\ufff2\001\002\000\046\004\021\005\016\007\077\011" +
    "\076\012\017\016\042\017\036\020\044\021\035\022\037" +
    "\023\046\024\040\025\045\026\043\027\047\030\041\036" +
    "\020\040\131\001\002\000\010\002\ufff5\037\ufff5\040\ufff5" +
    "\001\002\000\004\010\uffee\001\002\000\016\004\021\005" +
    "\016\007\077\011\076\012\017\036\020\001\002\000\010" +
    "\002\ufff6\037\ufff6\040\ufff6\001\002\000\004\010\uffef\001" +
    "\002\000\020\004\021\005\016\007\013\011\005\012\017" +
    "\036\020\040\135\001\002\000\016\004\021\005\016\007" +
    "\013\011\005\012\017\036\020\001\002\000\004\002\001" +
    "\001\002\000\014\012\017\013\027\014\031\031\032\032" +
    "\033\001\002\000\040\002\uffe7\010\uffe7\016\042\017\036" +
    "\020\044\021\035\022\037\023\046\024\040\025\045\026" +
    "\043\027\047\030\041\037\uffe7\040\uffe7\001\002\000\046" +
    "\004\021\005\016\007\013\011\005\012\017\016\042\017" +
    "\036\020\044\021\035\022\037\023\046\024\040\025\045" +
    "\026\043\027\047\030\041\036\020\040\142\001\002\000" +
    "\016\004\021\005\016\007\013\011\005\012\017\036\020" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\020\002\011\003\013\005\010\006\006\007" +
    "\005\010\014\011\007\001\001\000\002\001\001\000\006" +
    "\011\027\012\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\027\012\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\021\003\013\005\010\006\006\007\005\010\014\011" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\027\012\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\027\012\064\001\001\000" +
    "\006\011\027\012\062\001\001\000\002\001\001\000\006" +
    "\011\027\012\061\001\001\000\006\011\027\012\060\001" +
    "\001\000\006\011\027\012\057\001\001\000\006\011\027" +
    "\012\056\001\001\000\006\011\027\012\055\001\001\000" +
    "\006\011\027\012\054\001\001\000\006\011\027\012\053" +
    "\001\001\000\006\011\027\012\052\001\001\000\006\011" +
    "\027\012\051\001\001\000\006\011\027\012\050\001\001" +
    "\000\006\011\027\012\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\027\012\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\071\003\013\005\010\006\006\007" +
    "\005\010\014\011\007\001\001\000\002\001\001\000\020" +
    "\003\073\004\074\005\100\006\006\007\005\010\014\011" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\027\012\125\001\001\000\006\011\027\012\107\001" +
    "\001\000\020\003\101\004\102\005\100\006\006\007\005" +
    "\010\014\011\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\105\005\010\006\006" +
    "\007\005\010\014\011\007\001\001\000\016\003\106\005" +
    "\010\006\006\007\005\010\014\011\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\073\004\110\005" +
    "\100\006\006\007\005\010\014\011\007\001\001\000\002" +
    "\001\001\000\020\003\101\004\112\005\100\006\006\007" +
    "\005\010\014\011\007\001\001\000\002\001\001\000\020" +
    "\003\105\004\115\005\100\006\006\007\005\010\014\011" +
    "\007\001\001\000\020\003\106\004\116\005\100\006\006" +
    "\007\005\010\014\011\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\121\004\122\005\100\006\006" +
    "\007\005\010\014\011\007\001\001\000\020\003\123\004" +
    "\124\005\100\006\006\007\005\010\014\011\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\126\004\127\005\100\006\006" +
    "\007\005\010\014\011\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\131\004\132\005\100\006\006" +
    "\007\005\010\014\011\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\121\005\010\006\006\007\005" +
    "\010\014\011\007\001\001\000\016\003\123\005\010\006" +
    "\006\007\005\010\014\011\007\001\001\000\002\001\001" +
    "\000\006\011\027\012\137\001\001\000\002\001\001\000" +
    "\016\003\126\005\010\006\006\007\005\010\014\011\007" +
    "\001\001\000\016\003\131\005\010\006\006\007\005\010" +
    "\014\011\007\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= expression GET_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= expression LET_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= expression GT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression LT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression EQ_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= NOT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression AND_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression OR_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression PROD_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression DIV_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression SUBS_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression SUM_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable ::= variable LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= type T_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= T_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= T_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assignment ::= variable ASSIGN_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration ::= type IDENTIFIER ASSIGN_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // non_if_statement ::= assignment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // non_if_statement ::= declaration 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // non_if_statement ::= START_BLOCK statements END_BLOCK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // then_statement ::= non_if_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // then_statement ::= WHILE expression then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // then_statement ::= WHILE expression SEPARATOR then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // then_statement ::= IF expression then_statement ELSE then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // then_statement ::= IF expression SEPARATOR then_statement ELSE then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // then_statement ::= IF expression then_statement ELSE SEPARATOR then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // then_statement ::= IF expression SEPARATOR then_statement ELSE SEPARATOR then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= non_if_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE expression statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= WHILE expression SEPARATOR statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= IF expression then_statement ELSE statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= IF expression SEPARATOR then_statement ELSE statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= IF expression then_statement ELSE SEPARATOR statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IF expression SEPARATOR then_statement ELSE SEPARATOR statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= IF expression statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= IF expression SEPARATOR statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement SEPARATOR statements 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= SEPARATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement SEPARATOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statement 
            {
              Object RESULT =null;
		
                    RESULT = "JAMAJAMAJAMA";
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

