
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 01 18:53:37 CEST 2018
//----------------------------------------------------

package serum;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 01 18:53:37 CEST 2018
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\007\000\002\003\005" +
    "\000\002\003\003\000\002\004\007\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\006\000\002\007" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\011\003\000\002\011\006\000\002\012\003\000" +
    "\002\012\005\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\016\004\020\005\015\007\012\011\004\012" +
    "\016\036\017\001\002\000\014\012\016\013\026\014\030" +
    "\031\032\032\031\001\002\000\006\010\ufff5\040\ufff5\001" +
    "\002\000\006\010\ufff6\040\ufff6\001\002\000\006\015\112" +
    "\034\065\001\002\000\004\040\ufffb\001\002\000\004\002" +
    "\111\001\002\000\014\012\016\013\026\014\030\031\032" +
    "\032\031\001\002\000\004\040\070\001\002\000\006\006" +
    "\023\012\024\001\002\000\006\006\ufff0\012\ufff0\001\002" +
    "\000\060\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\040\uffee\001\002\000\016" +
    "\004\020\005\015\007\012\011\004\012\016\036\017\001" +
    "\002\000\006\006\ufff1\012\ufff1\001\002\000\004\037\022" +
    "\001\002\000\006\010\ufff7\040\ufff7\001\002\000\006\006" +
    "\uffef\012\uffef\001\002\000\010\010\ufff4\015\025\040\ufff4" +
    "\001\002\000\014\012\016\013\026\014\030\031\032\032" +
    "\031\001\002\000\054\004\uffea\005\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\033\uffea\035\uffea\036\uffea\040\uffea\001\002\000\056\004" +
    "\uffec\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\033\uffec\034\065\035\uffec" +
    "\036\uffec\040\uffec\001\002\000\054\004\uffe5\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5\001\002" +
    "\000\014\012\016\013\026\014\030\031\032\032\031\001" +
    "\002\000\014\012\016\013\026\014\030\031\032\032\031" +
    "\001\002\000\034\010\ufff3\016\041\017\035\020\043\021" +
    "\034\022\036\023\045\024\037\025\044\026\042\027\046" +
    "\030\040\040\ufff3\001\002\000\014\012\016\013\026\014" +
    "\030\031\032\032\031\001\002\000\014\012\016\013\026" +
    "\014\030\031\032\032\031\001\002\000\014\012\016\013" +
    "\026\014\030\031\032\032\031\001\002\000\014\012\016" +
    "\013\026\014\030\031\032\032\031\001\002\000\014\012" +
    "\016\013\026\014\030\031\032\032\031\001\002\000\014" +
    "\012\016\013\026\014\030\031\032\032\031\001\002\000" +
    "\014\012\016\013\026\014\030\031\032\032\031\001\002" +
    "\000\014\012\016\013\026\014\030\031\032\032\031\001" +
    "\002\000\014\012\016\013\026\014\030\031\032\032\031" +
    "\001\002\000\014\012\016\013\026\014\030\031\032\032" +
    "\031\001\002\000\014\012\016\013\026\014\030\031\032" +
    "\032\031\001\002\000\054\004\uffe3\005\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\033\uffe3\035\uffe3\036\uffe3\040\uffe3\001\002\000\054" +
    "\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\016" +
    "\041\017\035\020\043\021\034\022\036\023\uffe9\024\uffe9" +
    "\025\044\026\042\027\046\030\040\033\uffe9\035\uffe9\036" +
    "\uffe9\040\uffe9\001\002\000\054\004\uffe6\005\uffe6\007\uffe6" +
    "\010\uffe6\011\uffe6\012\uffe6\016\041\017\035\020\043\021" +
    "\034\022\036\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\046" +
    "\030\040\033\uffe6\035\uffe6\036\uffe6\040\uffe6\001\002\000" +
    "\054\004\uffdf\005\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\046\030\040\033\uffdf\035\uffdf" +
    "\036\uffdf\040\uffdf\001\002\000\054\004\uffe7\005\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\016\041\017\035\020\043" +
    "\021\034\022\036\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\046\030\040\033\uffe7\035\uffe7\036\uffe7\040\uffe7\001\002" +
    "\000\054\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\046\030\040\033\uffe1\035" +
    "\uffe1\036\uffe1\040\uffe1\001\002\000\054\004\uffe4\005\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\046\030\uffe4\033\uffe4\035\uffe4\036\uffe4\040\uffe4\001" +
    "\002\000\054\004\uffe8\005\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\016\041\017\035\020\043\021\034\022\036\023" +
    "\uffe8\024\uffe8\025\044\026\042\027\046\030\040\033\uffe8" +
    "\035\uffe8\036\uffe8\040\uffe8\001\002\000\054\004\uffdd\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\046\030\040\033\uffdd\035\uffdd\036\uffdd\040\uffdd" +
    "\001\002\000\054\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\046\030\040\033" +
    "\uffe0\035\uffe0\036\uffe0\040\uffe0\001\002\000\054\004\uffde" +
    "\005\uffde\007\uffde\010\uffde\011\uffde\012\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\046\030\040\033\uffde\035\uffde\036\uffde\040" +
    "\uffde\001\002\000\054\004\uffe2\005\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\016\041\017\035\020\043\021\034\022" +
    "\036\023\045\024\037\025\044\026\042\027\046\030\040" +
    "\033\uffe2\035\uffe2\036\uffe2\040\uffe2\001\002\000\032\016" +
    "\041\017\035\020\043\021\034\022\036\023\045\024\037" +
    "\025\044\026\042\027\046\030\040\033\064\001\002\000" +
    "\054\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb\035\uffeb" +
    "\036\uffeb\040\uffeb\001\002\000\014\012\016\013\026\014" +
    "\030\031\032\032\031\001\002\000\032\016\041\017\035" +
    "\020\043\021\034\022\036\023\045\024\037\025\044\026" +
    "\042\027\046\030\040\035\067\001\002\000\060\004\uffed" +
    "\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\015\uffed\016" +
    "\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\040\uffed\001\002\000\022\002\000\004\020" +
    "\005\015\007\012\011\004\012\016\036\017\037\000\001" +
    "\002\000\006\002\uffff\037\uffff\001\002\000\044\004\020" +
    "\005\015\007\076\011\075\012\016\016\041\017\035\020" +
    "\043\021\034\022\036\023\045\024\037\025\044\026\042" +
    "\027\046\030\040\036\017\001\002\000\004\040\ufffe\001" +
    "\002\000\004\010\110\001\002\000\014\012\016\013\026" +
    "\014\030\031\032\032\031\001\002\000\014\012\016\013" +
    "\026\014\030\031\032\032\031\001\002\000\006\010\ufff8" +
    "\040\ufffb\001\002\000\044\004\020\005\015\007\076\011" +
    "\075\012\016\016\041\017\035\020\043\021\034\022\036" +
    "\023\045\024\037\025\044\026\042\027\046\030\040\036" +
    "\017\001\002\000\004\010\102\001\002\000\016\004\020" +
    "\005\015\007\076\011\075\012\016\036\017\001\002\000" +
    "\004\040\ufffd\001\002\000\004\010\ufffa\001\002\000\044" +
    "\004\020\005\015\007\076\011\075\012\016\016\041\017" +
    "\035\020\043\021\034\022\036\023\045\024\037\025\044" +
    "\026\042\027\046\030\040\036\017\001\002\000\004\040" +
    "\ufffc\001\002\000\004\010\ufff9\001\002\000\016\004\020" +
    "\005\015\007\012\011\004\012\016\036\017\001\002\000" +
    "\004\002\001\001\002\000\014\012\016\013\026\014\030" +
    "\031\032\032\031\001\002\000\034\010\ufff2\016\041\017" +
    "\035\020\043\021\034\022\036\023\045\024\037\025\044" +
    "\026\042\027\046\030\040\040\ufff2\001\002\000\044\004" +
    "\020\005\015\007\012\011\004\012\016\016\041\017\035" +
    "\020\043\021\034\022\036\023\045\024\037\025\044\026" +
    "\042\027\046\030\040\036\017\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\020\002\010\003\012\005\007\006\005\007" +
    "\004\010\013\011\006\001\001\000\006\011\026\012\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\026" +
    "\012\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\002\020\003\012" +
    "\005\007\006\005\007\004\010\013\011\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\026\012\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\026\012\062\001\001\000\006\011\026\012" +
    "\061\001\001\000\002\001\001\000\006\011\026\012\060" +
    "\001\001\000\006\011\026\012\057\001\001\000\006\011" +
    "\026\012\056\001\001\000\006\011\026\012\055\001\001" +
    "\000\006\011\026\012\054\001\001\000\006\011\026\012" +
    "\053\001\001\000\006\011\026\012\052\001\001\000\006" +
    "\011\026\012\051\001\001\000\006\011\026\012\050\001" +
    "\001\000\006\011\026\012\047\001\001\000\006\011\026" +
    "\012\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\026\012" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\070\003\012\005\007\006\005\007\004\010\013\011" +
    "\006\001\001\000\002\001\001\000\020\003\072\004\073" +
    "\005\076\006\005\007\004\010\013\011\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\026\012\104" +
    "\001\001\000\006\011\026\012\077\001\001\000\002\001" +
    "\001\000\020\003\072\004\100\005\076\006\005\007\004" +
    "\010\013\011\006\001\001\000\002\001\001\000\020\003" +
    "\102\004\103\005\076\006\005\007\004\010\013\011\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\105\004\106\005\076\006\005\007\004\010\013\011\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\102\005\007\006\005\007\004\010\013\011\006\001\001" +
    "\000\002\001\001\000\006\011\026\012\112\001\001\000" +
    "\002\001\001\000\016\003\105\005\007\006\005\007\004" +
    "\010\013\011\006\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression GET_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression LET_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression GT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression LT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression EQ_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= NOT_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression AND_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression OR_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression PROD_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression DIV_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression SUBS_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression SUM_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable ::= variable LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variable ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= type T_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= T_BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= T_INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("type",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assignment ::= variable ASSIGN_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaration ::= type IDENTIFIER ASSIGN_OP expression 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaration",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // non_if_statement ::= assignment 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // non_if_statement ::= declaration 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // non_if_statement ::= START_BLOCK statements END_BLOCK 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("non_if_statement",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // then_statement ::= non_if_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // then_statement ::= WHILE expression then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // then_statement ::= IF expression then_statement ELSE then_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("then_statement",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= non_if_statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= WHILE expression statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= IF expression then_statement ELSE statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= IF expression statement 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement SEPARATOR statements 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statement SEPARATOR 
            {
              Object RESULT =null;
		
                    RESULT = "JAMAJAMAJAMA";
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("statements",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

