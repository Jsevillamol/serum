/* The following code was generated by JFlex 1.4.3 on 30/04/18 20:01 */

package serum;

import java_cup.runtime.*;
import java.io.Reader;

/**
 * Especificacion del analizador lexico de SeRuM
 */

class AnalizadorLexicoSeRuM implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\3\1\2\1\0\1\3\1\1\16\20\4\0\1\3\3\0"+
    "\1\17\5\0\1\30\1\42\1\0\1\43\1\0\1\27\1\21\11\22"+
    "\1\0\1\45\1\40\1\37\1\41\2\0\5\17\1\24\5\17\1\4"+
    "\7\17\1\10\6\17\1\32\1\16\1\33\1\0\1\17\1\0\1\13"+
    "\1\31\1\17\1\44\1\7\1\34\1\17\1\35\1\5\2\17\1\25"+
    "\1\12\1\6\1\15\2\17\1\11\1\26\1\14\1\23\1\17\1\36"+
    "\3\17\1\46\1\0\1\47\1\0\41\20\2\0\4\17\4\0\1\17"+
    "\2\0\1\20\7\0\1\17\4\0\1\17\5\0\27\17\1\0\37\17"+
    "\1\0\u01ca\17\4\0\14\17\16\0\5\17\7\0\1\17\1\0\1\17"+
    "\21\0\160\20\5\17\1\0\2\17\2\0\4\17\10\0\1\17\1\0"+
    "\3\17\1\0\1\17\1\0\24\17\1\0\123\17\1\0\213\17\1\0"+
    "\5\20\2\0\236\17\11\0\46\17\2\0\1\17\7\0\47\17\7\0"+
    "\1\17\1\0\55\20\1\0\1\20\1\0\2\20\1\0\2\20\1\0"+
    "\1\20\10\0\33\17\5\0\3\17\15\0\5\20\6\0\1\17\4\0"+
    "\13\20\5\0\53\17\37\20\4\0\2\17\1\20\143\17\1\0\1\17"+
    "\10\20\1\0\6\20\2\17\2\20\1\0\4\20\2\17\12\20\3\17"+
    "\2\0\1\17\17\0\1\20\1\17\1\20\36\17\33\20\2\0\131\17"+
    "\13\20\1\17\16\0\12\20\41\17\11\20\2\17\4\0\1\17\5\0"+
    "\26\17\4\20\1\17\11\20\1\17\3\20\1\17\5\20\22\0\31\17"+
    "\3\20\104\0\1\17\1\0\13\17\67\0\33\20\1\0\4\20\66\17"+
    "\3\20\1\17\22\20\1\17\7\20\12\17\2\20\2\0\12\20\1\0"+
    "\7\17\1\0\7\17\1\0\3\20\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\1\17\3\0\4\17\2\0\1\20\1\17"+
    "\7\20\2\0\2\20\2\0\3\20\1\17\10\0\1\20\4\0\2\17"+
    "\1\0\3\17\2\20\2\0\12\20\4\17\7\0\1\17\5\0\3\20"+
    "\1\0\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0\2\17"+
    "\1\0\2\17\1\0\2\17\2\0\1\20\1\0\5\20\4\0\2\20"+
    "\2\0\3\20\3\0\1\20\7\0\4\17\1\0\1\17\7\0\14\20"+
    "\3\17\1\20\13\0\3\20\1\0\11\17\1\0\3\17\1\0\26\17"+
    "\1\0\7\17\1\0\2\17\1\0\5\17\2\0\1\20\1\17\10\20"+
    "\1\0\3\20\1\0\3\20\2\0\1\17\17\0\2\17\2\20\2\0"+
    "\12\20\1\0\1\17\17\0\3\20\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\2\17\1\0\5\17\2\0\1\20\1\17"+
    "\7\20\2\0\2\20\2\0\3\20\10\0\2\20\4\0\2\17\1\0"+
    "\3\17\2\20\2\0\12\20\1\0\1\17\20\0\1\20\1\17\1\0"+
    "\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0\1\17\1\0"+
    "\2\17\3\0\2\17\3\0\3\17\3\0\14\17\4\0\5\20\3\0"+
    "\3\20\1\0\4\20\2\0\1\17\6\0\1\20\16\0\12\20\11\0"+
    "\1\17\7\0\3\20\1\0\10\17\1\0\3\17\1\0\27\17\1\0"+
    "\12\17\1\0\5\17\3\0\1\17\7\20\1\0\3\20\1\0\4\20"+
    "\7\0\2\20\1\0\2\17\6\0\2\17\2\20\2\0\12\20\22\0"+
    "\2\20\1\0\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\0"+
    "\5\17\2\0\1\20\1\17\7\20\1\0\3\20\1\0\4\20\7\0"+
    "\2\20\7\0\1\17\1\0\2\17\2\20\2\0\12\20\1\0\2\17"+
    "\17\0\2\20\1\0\10\17\1\0\3\17\1\0\51\17\2\0\1\17"+
    "\7\20\1\0\3\20\1\0\4\20\1\17\10\0\1\20\10\0\2\17"+
    "\2\20\2\0\12\20\12\0\6\17\2\0\2\20\1\0\22\17\3\0"+
    "\30\17\1\0\11\17\1\0\1\17\2\0\7\17\3\0\1\20\4\0"+
    "\6\20\1\0\1\20\1\0\10\20\22\0\2\20\15\0\60\17\1\20"+
    "\2\17\7\20\4\0\10\17\10\20\1\0\12\20\47\0\2\17\1\0"+
    "\1\17\2\0\2\17\1\0\1\17\2\0\1\17\6\0\4\17\1\0"+
    "\7\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0"+
    "\4\17\1\20\2\17\6\20\1\0\2\20\1\17\2\0\5\17\1\0"+
    "\1\17\1\0\6\20\2\0\12\20\2\0\4\17\40\0\1\17\27\0"+
    "\2\20\6\0\12\20\13\0\1\20\1\0\1\20\1\0\1\20\4\0"+
    "\2\20\10\17\1\0\44\17\4\0\24\20\1\0\2\20\5\17\13\20"+
    "\1\0\44\20\11\0\1\20\71\0\53\17\24\20\1\17\12\20\6\0"+
    "\6\17\4\20\4\17\3\20\1\17\3\20\2\17\7\20\3\17\4\20"+
    "\15\17\14\20\1\17\17\20\2\0\46\17\1\0\1\17\5\0\1\17"+
    "\2\0\53\17\1\0\u014d\17\1\0\4\17\2\0\7\17\1\0\1\17"+
    "\1\0\4\17\2\0\51\17\1\0\4\17\2\0\41\17\1\0\4\17"+
    "\2\0\7\17\1\0\1\17\1\0\4\17\2\0\17\17\1\0\71\17"+
    "\1\0\4\17\2\0\103\17\2\0\3\20\40\0\20\17\20\0\125\17"+
    "\14\0\u026c\17\2\0\21\17\1\0\32\17\5\0\113\17\3\0\3\17"+
    "\17\0\15\17\1\0\4\17\3\20\13\0\22\17\3\20\13\0\22\17"+
    "\2\20\14\0\15\17\1\0\3\17\1\0\2\20\14\0\64\17\40\20"+
    "\3\0\1\17\3\0\2\17\1\20\2\0\12\20\41\0\3\20\2\0"+
    "\12\20\6\0\130\17\10\0\51\17\1\20\1\17\5\0\106\17\12\0"+
    "\35\17\3\0\14\20\4\0\14\20\12\0\12\20\36\17\2\0\5\17"+
    "\13\0\54\17\4\0\21\20\7\17\2\20\6\0\12\20\46\0\27\17"+
    "\5\20\4\0\65\17\12\20\1\0\35\20\2\0\13\20\6\0\12\20"+
    "\15\0\1\17\130\0\5\20\57\17\21\20\7\17\4\0\12\20\21\0"+
    "\11\20\14\0\3\20\36\17\15\20\2\17\12\20\54\17\16\20\14\0"+
    "\44\17\24\20\10\0\12\20\3\0\3\17\12\20\44\17\122\0\3\20"+
    "\1\0\25\20\4\17\1\20\4\17\3\20\2\17\11\0\300\17\47\20"+
    "\25\0\4\20\u0116\17\2\0\6\17\2\0\46\17\2\0\6\17\2\0"+
    "\10\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\37\17\2\0"+
    "\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17\3\0"+
    "\4\17\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17\16\0"+
    "\5\20\32\0\5\20\20\0\2\17\23\0\1\17\13\0\5\20\5\0"+
    "\6\20\1\0\1\17\15\0\1\17\20\0\15\17\3\0\33\17\25\0"+
    "\15\20\4\0\1\20\3\0\14\20\21\0\1\17\4\0\1\17\2\0"+
    "\12\17\1\0\1\17\3\0\5\17\6\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\4\17\1\0\13\17\2\0\4\17\5\0\5\17\4\0"+
    "\1\17\21\0\51\17\u0a77\0\57\17\1\0\57\17\1\0\205\17\6\0"+
    "\4\17\3\20\2\17\14\0\46\17\1\0\1\17\5\0\1\17\2\0"+
    "\70\17\7\0\1\17\17\0\1\20\27\17\11\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17"+
    "\1\0\7\17\1\0\40\20\57\0\1\17\u01d5\0\3\17\31\0\11\17"+
    "\6\20\1\0\5\17\2\0\5\17\4\0\126\17\2\0\2\20\2\0"+
    "\3\17\1\0\132\17\1\0\4\17\5\0\51\17\3\0\136\17\21\0"+
    "\33\17\65\0\20\17\u0200\0\u19b6\17\112\0\u51cd\17\63\0\u048d\17\103\0"+
    "\56\17\2\0\u010d\17\3\0\20\17\12\20\2\17\24\0\57\17\1\20"+
    "\4\0\12\20\1\0\31\17\7\0\1\20\120\17\2\20\45\0\11\17"+
    "\2\0\147\17\2\0\4\17\1\0\4\17\14\0\13\17\115\0\12\17"+
    "\1\20\3\17\1\20\4\17\1\20\27\17\5\20\20\0\1\17\7\0"+
    "\64\17\14\0\2\20\62\17\21\20\13\0\12\20\6\0\22\20\6\17"+
    "\3\0\1\17\4\0\12\20\34\17\10\20\2\0\27\17\15\20\14\0"+
    "\35\17\3\0\4\20\57\17\16\20\16\0\1\17\12\20\46\0\51\17"+
    "\16\20\11\0\3\17\1\20\10\17\2\20\2\0\12\20\6\0\27\17"+
    "\3\0\1\17\1\20\4\0\60\17\1\20\1\17\3\20\2\17\2\20"+
    "\5\17\2\20\1\17\1\20\1\17\30\0\3\17\2\0\13\17\5\20"+
    "\2\0\3\17\2\20\12\0\6\17\2\0\6\17\2\0\6\17\11\0"+
    "\7\17\1\0\7\17\221\0\43\17\10\20\1\0\2\20\2\0\12\20"+
    "\6\0\u2ba4\17\14\0\27\17\4\0\61\17\u2104\0\u016e\17\2\0\152\17"+
    "\46\0\7\17\14\0\5\17\5\0\1\17\1\20\12\17\1\0\15\17"+
    "\1\0\5\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0\154\17"+
    "\41\0\u016b\17\22\0\100\17\2\0\66\17\50\0\15\17\3\0\20\20"+
    "\20\0\7\20\14\0\2\17\30\0\3\17\31\0\1\17\6\0\5\17"+
    "\1\0\207\17\2\0\1\20\4\0\1\17\13\0\12\20\7\0\32\17"+
    "\4\0\1\17\1\0\32\17\13\0\131\17\3\0\6\17\2\0\6\17"+
    "\2\0\6\17\2\0\3\17\3\0\2\17\3\0\2\17\22\0\3\20"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\3\1\1\2\4\1\3\1\5"+
    "\1\6\1\3\1\7\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\3\1\21\5\3"+
    "\1\22\2\0\1\3\1\2\1\0\1\3\1\23\1\3"+
    "\1\24\1\25\1\26\1\3\1\27\1\30\2\3\1\31"+
    "\1\3\1\0\1\3\1\2\2\0\3\3\1\32\1\33"+
    "\1\34\2\0\1\2\1\35\2\3\1\0\1\36\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\37\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\50\0\u01e0\0\u0208"+
    "\0\u0230\0\50\0\u0258\0\u0280\0\50\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\50\0\50\0\50\0\50\0\50\0\u0348\0\u0370"+
    "\0\u0118\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0118\0\u01b8"+
    "\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\50\0\u0528\0\50"+
    "\0\50\0\50\0\u0550\0\u0118\0\u0118\0\u0578\0\u05a0\0\u0118"+
    "\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0"+
    "\0\u0708\0\u0118\0\u0118\0\u0118\0\u0730\0\u0758\0\u0668\0\u0118"+
    "\0\u0780\0\u07a8\0\u07d0\0\u0118\0\u07f8\0\u0820\0\u0848\0\u0870"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\14\1\15\1\11\1\2\1\16\1\17"+
    "\1\11\1\20\2\11\1\21\1\22\1\23\1\24\1\25"+
    "\2\11\1\26\1\27\1\30\1\31\1\32\1\33\1\11"+
    "\1\34\1\35\1\36\54\0\1\11\1\37\10\11\1\0"+
    "\10\11\2\0\1\11\2\0\3\11\5\0\1\11\7\0"+
    "\2\11\1\40\7\11\1\0\10\11\2\0\1\11\2\0"+
    "\1\41\2\11\5\0\1\11\7\0\11\11\1\42\1\0"+
    "\10\11\2\0\1\11\2\0\3\11\5\0\1\11\7\0"+
    "\12\11\1\0\6\11\1\43\1\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\7\0\5\11\1\44\4\11\1\0"+
    "\10\11\2\0\1\11\2\0\3\11\5\0\1\11\7\0"+
    "\12\11\1\0\10\11\2\0\1\11\2\0\3\11\5\0"+
    "\1\11\7\0\2\11\1\45\7\11\1\0\10\11\2\0"+
    "\1\11\2\0\3\11\5\0\1\11\7\0\12\11\1\0"+
    "\10\11\2\0\1\11\2\0\1\11\1\46\1\11\5\0"+
    "\1\11\7\0\5\11\1\47\4\11\1\0\10\11\2\0"+
    "\1\11\2\0\3\11\5\0\1\11\6\0\1\50\1\51"+
    "\64\0\2\17\31\0\7\11\1\52\2\11\1\0\10\11"+
    "\2\0\1\11\2\0\3\11\5\0\1\11\32\0\1\53"+
    "\1\54\23\0\11\11\1\55\1\0\10\11\2\0\1\11"+
    "\2\0\3\11\5\0\1\11\36\0\1\56\20\0\12\11"+
    "\1\0\10\11\2\0\1\11\2\0\1\11\1\57\1\11"+
    "\5\0\1\11\42\0\1\60\47\0\1\61\47\0\1\62"+
    "\14\0\2\11\1\63\7\11\1\0\10\11\2\0\1\11"+
    "\2\0\3\11\5\0\1\11\7\0\10\11\1\64\1\11"+
    "\1\0\10\11\2\0\1\11\2\0\3\11\5\0\1\11"+
    "\7\0\10\11\1\65\1\11\1\0\10\11\2\0\1\11"+
    "\2\0\3\11\5\0\1\11\7\0\12\11\1\0\7\11"+
    "\1\66\2\0\1\11\2\0\3\11\5\0\1\11\7\0"+
    "\12\11\1\0\4\11\1\67\3\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\7\0\12\11\1\0\10\11\2\0"+
    "\1\11\2\0\3\11\5\0\1\70\7\0\3\11\1\71"+
    "\6\11\1\0\10\11\2\0\1\11\2\0\3\11\5\0"+
    "\1\11\10\0\1\72\46\0\12\11\1\0\6\11\1\73"+
    "\1\11\2\0\1\11\2\0\3\11\5\0\1\11\3\0"+
    "\1\53\1\74\1\3\45\53\30\75\1\76\17\75\4\0"+
    "\11\11\1\77\1\0\10\11\2\0\1\11\2\0\3\11"+
    "\5\0\1\11\7\0\1\11\1\100\10\11\1\0\10\11"+
    "\2\0\1\11\2\0\3\11\5\0\1\11\7\0\3\11"+
    "\1\101\6\11\1\0\10\11\2\0\1\11\2\0\3\11"+
    "\5\0\1\11\7\0\3\11\1\102\6\11\1\0\10\11"+
    "\2\0\1\11\2\0\3\11\5\0\1\11\7\0\3\11"+
    "\1\103\6\11\1\0\10\11\2\0\1\11\2\0\3\11"+
    "\5\0\1\11\7\0\2\11\1\104\7\11\1\0\10\11"+
    "\2\0\1\11\2\0\3\11\5\0\1\11\11\0\1\105"+
    "\45\0\12\11\1\0\7\11\1\67\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\5\0\1\3\45\0\30\75\1\106"+
    "\46\75\1\107\1\106\17\75\4\0\12\11\1\0\6\11"+
    "\1\110\1\11\2\0\1\11\2\0\3\11\5\0\1\11"+
    "\7\0\12\11\1\0\6\11\1\111\1\11\2\0\1\11"+
    "\2\0\3\11\5\0\1\11\7\0\4\11\1\112\5\11"+
    "\1\0\10\11\2\0\1\11\2\0\3\11\5\0\1\11"+
    "\12\0\1\113\40\0\27\75\1\3\1\106\17\75\4\0"+
    "\3\11\1\114\6\11\1\0\10\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\7\0\3\11\1\115\6\11\1\0"+
    "\10\11\2\0\1\11\2\0\3\11\5\0\1\11\13\0"+
    "\1\116\43\0\5\11\1\117\4\11\1\0\10\11\2\0"+
    "\1\11\2\0\3\11\5\0\1\11\12\0\1\120\44\0"+
    "\6\11\1\121\3\11\1\0\10\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\14\0\1\122\42\0\1\11\1\123"+
    "\10\11\1\0\10\11\2\0\1\11\2\0\3\11\5\0"+
    "\1\11\15\0\1\124\41\0\2\11\1\125\7\11\1\0"+
    "\10\11\2\0\1\11\2\0\3\11\5\0\1\11\10\0"+
    "\1\126\46\0\7\11\1\127\2\11\1\0\10\11\2\0"+
    "\1\11\2\0\3\11\5\0\1\11\11\0\1\130\45\0"+
    "\10\11\1\131\1\11\1\0\10\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\16\0\1\132\40\0\11\11\1\133"+
    "\1\0\10\11\2\0\1\11\2\0\3\11\5\0\1\11"+
    "\17\0\1\134\37\0\5\11\1\135\4\11\1\0\10\11"+
    "\2\0\1\11\2\0\3\11\5\0\1\11\20\0\1\136"+
    "\35\0\1\137\12\11\1\0\10\11\2\0\1\11\2\0"+
    "\3\11\5\0\1\11\14\0\1\140\41\0\1\137\47\0"+
    "\1\140\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\12\1\1\11\3\1\1\11\2\1\1\11"+
    "\4\1\5\11\11\1\2\0\2\1\1\0\1\1\1\11"+
    "\1\1\3\11\7\1\1\0\2\1\2\0\6\1\2\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[96];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  //StringBuffer string = new StringBuffer();

  int last_column = 0;

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexicoSeRuM(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorLexicoSeRuM(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return symbol(sym.ASSIGN_OP);
          }
        case 32: break;
        case 13: 
          { return symbol(sym.SUBS_OP);
          }
        case 33: break;
        case 21: 
          { return symbol(sym.LET_OP);
          }
        case 34: break;
        case 8: 
          { return symbol(sym.RBRACKET);
          }
        case 35: break;
        case 14: 
          { return symbol(sym.SEPARATOR);
          }
        case 36: break;
        case 12: 
          { return symbol(sym.SUM_OP);
          }
        case 37: break;
        case 10: 
          { return symbol(sym.LT_OP);
          }
        case 38: break;
        case 19: 
          { return symbol(sym.T_ARRAY);
          }
        case 39: break;
        case 6: 
          { return symbol(sym.PROD_OP);
          }
        case 40: break;
        case 18: 
          { return symbol(sym.OR_OP);
          }
        case 41: break;
        case 26: 
          { return symbol(sym.ELSE);
          }
        case 42: break;
        case 17: 
          { return symbol(sym.IF);
          }
        case 43: break;
        case 15: 
          { return symbol(sym.START_BLOCK);
          }
        case 44: break;
        case 25: 
          { return symbol(sym.AND_OP);
          }
        case 45: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext);
          }
        case 46: break;
        case 4: 
          { return symbol(sym.INTEGER_LITERAL, yytext);
          }
        case 47: break;
        case 29: 
          { return symbol(sym.T_BOOL);
          }
        case 48: break;
        case 11: 
          { return symbol(sym.GT_OP);
          }
        case 49: break;
        case 16: 
          { return symbol(sym.END_BLOCK);
          }
        case 50: break;
        case 5: 
          { return symbol(sym.DIV_OP);
          }
        case 51: break;
        case 23: 
          { return symbol(sym.T_INT);
          }
        case 52: break;
        case 22: 
          { return symbol(sym.GET_OP);
          }
        case 53: break;
        case 1: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">");
          }
        case 54: break;
        case 7: 
          { return symbol(sym.LBRACKET);
          }
        case 55: break;
        case 27: 
          { return symbol(sym.BOOL_LITERAL, yytext);
          }
        case 56: break;
        case 28: 
          { return symbol(sym.THEN);
          }
        case 57: break;
        case 20: 
          { return symbol(sym.EQ_OP);
          }
        case 58: break;
        case 31: 
          { int aux = last_column;
  									last_column = yycolumn;
  									if (yycolumn == aux) 
  										return symbol(sym.SEPARATOR);
  								   	else if(yycolumn > aux) 
  								   		return symbol(sym.START_BLOCK);
  								   	else // if actual_column < aux
  								   		return symbol(sym.END_BLOCK);
          }
        case 59: break;
        case 30: 
          { return symbol(sym.WHILE);
          }
        case 60: break;
        case 24: 
          { return symbol(sym.NOT_OP);
          }
        case 61: break;
        case 2: 
          { /* ignore */
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
