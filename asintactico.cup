 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package serum;

import serum.ASTNodes.*;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:

    public static java.io.File file;

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                msg.append(" in line " + (s.left+1));
                if (s.right >= 0)
                    msg.append(", column " + (s.right+1));
            }
        }
        msg.append(" : " +  message);
        Logger.report_error.println(msg);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(5);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, TODO ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            file = new java.io.File(args[0]);

            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico(new java.io.FileReader(file)));
            //Generamos el arbol de sintaxis abstracta:
            ASTNode result = (ASTNode) asin.parse().value;

            //Fase de identificadores:
            IdTable idTable = new IdTable();
            result.identifiers(idTable);
            if (idTable.isFail())
                System.exit(2);

            //Comprobaci贸n de tipos:
            boolean typeCorrect = result.typeCheck();
            if (!typeCorrect)
                System.exit(3);

            //Generaci贸n de codigo:
            java.util.List<serum.codegen.PInstruction> code = new java.util.LinkedList();
            code.add(new serum.codegen.SetSP(idTable.getMaxRho()));
            code.addAll(result.toCode());
            code.add(new serum.codegen.Stop());

            //Numeraci贸n de instrucciones:
            int instructionPosition = 0;
            for (serum.codegen.PInstruction pinstruction : code)
                pinstruction.setPosition(instructionPosition++);

            //Mostrar c贸digo por pantalla:
            for (serum.codegen.PInstruction pinstruction : code)
                Logger.codeExit.print(pinstruction);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           T_INT, T_BOOL;
terminal           IF, ELSE, WHILE;
terminal String    IDENTIFIER;
terminal String    INTEGER_LITERAL, BOOL_LITERAL;
//terminal String    STRING_LITERAL;
terminal           ASSIGN_OP;
terminal           EQ_OP, LT_OP, GT_OP, LET_OP, GET_OP, SUM_OP, SUBS_OP, PROD_OP, DIV_OP, AND_OP, OR_OP, NOT_OP;
terminal           LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal           START_BLOCK, END_BLOCK;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal InstructionList statements;
non terminal Instruction statement, then_statement, non_if_statement; // Top level structure
non terminal Instruction declaration, assignment;                     // Variable manip statements
non terminal Type        type; 
non terminal Expression  expression; 
non terminal Variable    variable;                             

/* -------------Seccion de predencia y asociacion de los terminales----------- */
  
  /* Integer operators */
  precedence left SUM_OP, SUBS_OP;
  precedence left PROD_OP, DIV_OP;

  /* Boolean operators */
  precedence left EQ_OP, LT_OP, GT_OP, LET_OP, GET_OP;
  precedence left OR_OP;
  precedence left AND_OP;

  // Should we add precedence for (L/R)PARENS and NOT_OP?
  // UMINOS_OP missing!


/* ------------------- Seccion de la gramatica ------------------------ */

start with statements;

/* Top level statements */
statements ::= statement:s
                {:
                    Logger.log.println("statements ::= statement (row " + sleft + ")");
                    RESULT = new InstructionList(s);
                    RESULT.setRowAndCol(sleft + 1, sright + 1);
                :}
             | statement:s statements:ss 
                {:
                    Logger.log.println("statements ::= statement statements (row " + sleft + ")");
                    RESULT = new InstructionList(s, ss);
                    RESULT.setRowAndCol(sleft + 1, sright + 1);
                :}
             ;

statement  ::= IF:i expression:e statement:s
                {:
                    Logger.log.println("statement ::= IF expression statement (row " + ileft + ")");
                    RESULT = new IfSentence(e, s);
                    RESULT.setRowAndCol(ileft + 1, iright + 1);
                :}
             | IF:i expression:e then_statement:then ELSE statement:els 
                {:
                    Logger.log.println("statement ::= IF expression then_statement ELSE statement (row " + ileft + ")");
                    RESULT = new IfElseSentence(e, then, els);
                    RESULT.setRowAndCol(ileft + 1, iright + 1);
                :}
             | WHILE:w expression:e statement:s
                {:
                    Logger.log.println("statement ::= WHILE expression statement (row " + wleft + ")");
                    RESULT = new WhileSentence(e, s);
                    RESULT.setRowAndCol(wleft + 1, wright + 1);
                :}
             | non_if_statement:s
                {:
                    Logger.log.println("statement ::= non_if_statement (row " + sleft + ")");
                    RESULT = s;
                :}
             ;

then_statement ::= IF:i expression:e then_statement:then ELSE then_statement:els 
                      {:
                          Logger.log.println("then_statement ::= IF expression then_statement ELSE then_statement (row " + ileft + ")");
                          RESULT = new IfElseSentence(e, then, els);
                          RESULT.setRowAndCol(ileft + 1, iright + 1);
                      :}
                   | WHILE:w expression:e then_statement:s
                      {:
                          Logger.log.println("then_statement ::= WHILE expression then_statement (row " + wleft + ")");
                          RESULT = new WhileSentence(e, s);
                          RESULT.setRowAndCol(wleft + 1, wright + 1);
                      :}
                   | non_if_statement:s
                      {:
                          Logger.log.println("then_statement ::= non_if_statement (row " + sleft + ")");
                          RESULT = s;
                      :}
                   ;

non_if_statement ::= START_BLOCK:sb statements:s END_BLOCK
                      {:
                          Logger.log.println("non_if_statement ::= START_BLOCK statements END_BLOCK (row " + sbleft + ")");
                          RESULT = s;
                          RESULT.setRowAndCol(sbleft + 1, sbright + 1);
                      :}
                   | declaration:d
                      {:
                          Logger.log.println("non_if_statement ::= declaration (row " + dleft + ")");
                          RESULT = d;
                      :}
                   | assignment:a
                      {:
                          Logger.log.println("non_if_statement ::= assignment (row " + aleft + ")");
                          RESULT = a;
                      :}
                   ;

// The statement vs then_statement is for disambiguation purposes
// Solution taken from http://goldparser.org/doc/grammars/example-if-then-else.htm

/* Variable manipulation statements */
declaration ::= type:t IDENTIFIER:id 
                 {:
                    Logger.log.println("declaration ::= type IDENTIFIER (row " + tleft + ")");
                    RESULT = new Declaration(t, id);
                    RESULT.setRowAndCol(tleft + 1, tright + 1);
                 :}
              | type:t IDENTIFIER:id ASSIGN_OP expression:rhs 
                 {:
                    Logger.log.println("declaration ::= type IDENTIFIER ASSIGN_OP expression (row " + tleft + ")");
                    RESULT = new Initialization(t, id, rhs);
                    RESULT.setRowAndCol(tleft + 1, tright + 1);
                 :}
              ;

assignment  ::= variable:lhs ASSIGN_OP expression:rhs
                 {:
                    Logger.log.println("assignment ::= variable ASSIGN_OP expression (row " + lhsleft + ")");
                    RESULT = new Assignment(lhs, rhs);
                    RESULT.setRowAndCol(lhsleft + 1, lhsright + 1);
                 :}
              ;

/* Variable manipulation auxiliar sintactic elements */
type       ::= T_INT:t 
                 {:
                    Logger.log.println("type ::= T_INT (row " + tleft + ")");
                    RESULT = Type.TInt;
                 :}
             | T_BOOL:t
                 {:
                    Logger.log.println("type ::= T_BOOL (row " + tleft + ")");
                    RESULT = Type.TBool;
                 :}
             | type:t LBRACKET INTEGER_LITERAL:numberOfElements RBRACKET
                 {:
                    Logger.log.println("type ::= type T_ARRAY (row " + tleft + ")");
                    RESULT = t.addDimension(new Integer(numberOfElements));
                 :}
             ;

variable   ::= IDENTIFIER:id 
                 {:
                    Logger.log.println("variable ::= IDENTIFIER (row " + idleft + ")");
                    RESULT = new Variable(id);
                    RESULT.setRowAndCol(idleft + 1, idright + 1);
                 :}
             | variable:id LBRACKET expression:idx RBRACKET
                 {:
                    Logger.log.println("variable ::= variable LBRACKET expression RBRACKET (row " + idleft + ")");
                    RESULT = new ArrayAccess(id, idx);
                    RESULT.setRowAndCol(idleft + 1, idright + 1);
                 :}
             ;

/* Integer or bool expressions */
expression ::= variable:v 
                 {:
                    Logger.log.println("expression ::= variable (row " + vleft + ")");
                    RESULT = v;
                    RESULT.setRowAndCol(vleft + 1, vright + 1);
                 :}
             | LPAREN:l expression:e RPAREN
                 {:
                    Logger.log.println("expression ::= LPAREN variable RPAREN (row " + lleft + ")");
                    RESULT = e;
                    RESULT.setRowAndCol(lleft + 1, lright + 1);
                 :}

          // Int expressions
             |  INTEGER_LITERAL:c 
                 {:
                    Logger.log.println("expression ::= INTEGER_LITERAL (row " + cleft + ")");
                    RESULT = new Constant(new Integer(c));
                    RESULT.setRowAndCol(cleft + 1, cright + 1);
                 :}
             | expression:op1 SUM_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression SUM_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.SUM_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 SUBS_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression SUBS_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.SUBS_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 PROD_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression PROD_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.PROD_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 DIV_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression DIV_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.DIV_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
           
           // Bool expressions
             | BOOL_LITERAL:c
                 {:
                    Logger.log.println("expression ::= BOOL_LITERAL (row " + cleft + ")");
                    RESULT = new Constant(new Boolean(c));
                    RESULT.setRowAndCol(cleft + 1, cright + 1);
                 :}
             | expression:op1 OR_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression OR_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.OR_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 AND_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression AND_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.AND_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | NOT_OP:n expression:op1 
                 {:
                    Logger.log.println("expression ::= NOT_OP expression (row " + nleft + ")");
                    RESULT = new UnaryOp(op1, OperationType.NOT_OP);
                    RESULT.setRowAndCol(nleft + 1, nright + 1);
                 :}
             | expression:op1 EQ_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression EQ_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.EQ_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 LT_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression LT_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.LT_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 GT_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression GT_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.GT_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 LET_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression LET_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.LET_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             | expression:op1 GET_OP expression:op2 
                 {:
                    Logger.log.println("expression ::= expression GET_OP expression (row " + op1left + ")");
                    RESULT = new BinaryOp(op1, op2, OperationType.GET_OP);
                    RESULT.setRowAndCol(op1left + 1, op1right + 1);
                 :}
             ;