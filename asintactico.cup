 
   
/* ---------------Seccion de declaraciones preliminares--------------------*/
package serum;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};
   

   
/* ------------Declaracion de simbolos terminales y no terminales---------- */
   
/* Terminales (tokens obtenidos por el analizador lexico).  

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           T_INT, T_BOOL, T_ARRAY;
terminal           IF, ELSE, WHILE;
terminal String    IDENTIFIER;
terminal String    INTEGER_LITERAL, BOOL_LITERAL;
//terminal String    STRING_LITERAL;
terminal           ASSIGN_OP;
terminal           EQ_OP, LT_OP, GT_OP, LET_OP, GET_OP, SUM_OP, SUBS_OP, PROD_OP, DIV_OP, AND_OP, OR_OP, NOT_OP;
terminal           LPAREN, RPAREN, LBRACKET, RBRACKET;
terminal           START_BLOCK, END_BLOCK, SEPARATOR;
   
/* No terminales usados en la seccion gramatical. 

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal Object     statements, statement, then_statement, non_if_statement; // Top level structure
non terminal Object     declaration, assignment;                                 // Variable manip statements
non terminal Object     type, variable, expression;                              // Variable manip aux

/* -------------Seccion de predencia y asociacion de los terminales----------- */
  
  /* Integer operators */
  precedence left SUM_OP, SUBS_OP;
  precedence left PROD_OP, DIV_OP;

  /* Boolean operators */
  precedence left EQ_OP, LT_OP, GT_OP, LET_OP, GET_OP;
  precedence left OR_OP;
  precedence left AND_OP;

  // Should we add precedence for (L/R)PARENS and NOT_OP?
  // UMINOS_OP missing!


/* ------------------- Seccion de la gramatica ------------------------ */

start with statements;

/* Top level statements */
statements ::= statement SEPARATOR
                {:
                    RESULT = "JAMAJAMAJAMA";
                :}
             | statement SEPARATOR statements ;

statement  ::= IF expression statement
             | IF expression then_statement ELSE statement 
             | WHILE expression statement
             | non_if_statement ;

then_statement ::= IF expression then_statement ELSE then_statement
                 | WHILE expression then_statement
                 | non_if_statement ; 

non_if_statement ::= START_BLOCK statements END_BLOCK
                   | declaration | assignment ;

// The statement vs then_statement is for disambiguation purposes
// Solution taken from http://goldparser.org/doc/grammars/example-if-then-else.htm

/* Variable manipulation statements */
declaration ::= type IDENTIFIER | type IDENTIFIER ASSIGN_OP expression ;
assignment  ::= variable ASSIGN_OP expression ;

/* Variable manipulation auxiliar sintactic elements */
type       ::= T_INT | T_BOOL | type T_ARRAY ;
variable   ::= IDENTIFIER | variable LBRACKET expression RBRACKET;

/* Integer or bool expressions */
expression ::= variable | LPAREN expression RPAREN

          // Int expressions
           |  INTEGER_LITERAL 
           | expression SUM_OP expression | expression SUBS_OP expression
           | expression DIV_OP expression | expression PROD_OP expression 
           
           // Bool expressions
           | BOOL_LITERAL
           | expression OR_OP  expression | expression AND_OP expression
           | NOT_OP expression            | expression EQ_OP  expression 
           | expression LT_OP  expression | expression GT_OP  expression
           | expression LET_OP expression | expression GET_OP expression   ;